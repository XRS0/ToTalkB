// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/event.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventService_ProcessEvent_FullMethodName   = "/gen.EventService/ProcessEvent"
	EventService_GetEventStatus_FullMethodName = "/gen.EventService/GetEventStatus"
	EventService_GetAllEvents_FullMethodName   = "/gen.EventService/GetAllEvents"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с событиями
type EventServiceClient interface {
	ProcessEvent(ctx context.Context, in *ProcessEventRequest, opts ...grpc.CallOption) (*ProcessEventResponse, error)
	GetEventStatus(ctx context.Context, in *GetEventStatusRequest, opts ...grpc.CallOption) (*GetEventStatusResponse, error)
	GetAllEvents(ctx context.Context, in *GetAllEventsRequest, opts ...grpc.CallOption) (*GetAllEventsResponse, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) ProcessEvent(ctx context.Context, in *ProcessEventRequest, opts ...grpc.CallOption) (*ProcessEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessEventResponse)
	err := c.cc.Invoke(ctx, EventService_ProcessEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEventStatus(ctx context.Context, in *GetEventStatusRequest, opts ...grpc.CallOption) (*GetEventStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventStatusResponse)
	err := c.cc.Invoke(ctx, EventService_GetEventStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetAllEvents(ctx context.Context, in *GetAllEventsRequest, opts ...grpc.CallOption) (*GetAllEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllEventsResponse)
	err := c.cc.Invoke(ctx, EventService_GetAllEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility.
//
// Сервис для работы с событиями
type EventServiceServer interface {
	ProcessEvent(context.Context, *ProcessEventRequest) (*ProcessEventResponse, error)
	GetEventStatus(context.Context, *GetEventStatusRequest) (*GetEventStatusResponse, error)
	GetAllEvents(context.Context, *GetAllEventsRequest) (*GetAllEventsResponse, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventServiceServer struct{}

func (UnimplementedEventServiceServer) ProcessEvent(context.Context, *ProcessEventRequest) (*ProcessEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (UnimplementedEventServiceServer) GetEventStatus(context.Context, *GetEventStatusRequest) (*GetEventStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventStatus not implemented")
}
func (UnimplementedEventServiceServer) GetAllEvents(context.Context, *GetAllEventsRequest) (*GetAllEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEvents not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}
func (UnimplementedEventServiceServer) testEmbeddedByValue()                      {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_ProcessEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ProcessEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ProcessEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ProcessEvent(ctx, req.(*ProcessEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEventStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEventStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventStatus(ctx, req.(*GetEventStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetAllEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetAllEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetAllEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetAllEvents(ctx, req.(*GetAllEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessEvent",
			Handler:    _EventService_ProcessEvent_Handler,
		},
		{
			MethodName: "GetEventStatus",
			Handler:    _EventService_GetEventStatus_Handler,
		},
		{
			MethodName: "GetAllEvents",
			Handler:    _EventService_GetAllEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/event.proto",
}

const (
	EventQueueService_JoinQueue_FullMethodName       = "/gen.EventQueueService/JoinQueue"
	EventQueueService_LeaveQueue_FullMethodName      = "/gen.EventQueueService/LeaveQueue"
	EventQueueService_GetQueueStatus_FullMethodName  = "/gen.EventQueueService/GetQueueStatus"
	EventQueueService_GetUserPosition_FullMethodName = "/gen.EventQueueService/GetUserPosition"
	EventQueueService_ProcessNext_FullMethodName     = "/gen.EventQueueService/ProcessNext"
	EventQueueService_CloseQueue_FullMethodName      = "/gen.EventQueueService/CloseQueue"
)

// EventQueueServiceClient is the client API for EventQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с очередью событий
type EventQueueServiceClient interface {
	// Добавление пользователя в очередь события
	JoinQueue(ctx context.Context, in *JoinQueueRequest, opts ...grpc.CallOption) (*JoinQueueResponse, error)
	// Удаление пользователя из очереди события
	LeaveQueue(ctx context.Context, in *LeaveQueueRequest, opts ...grpc.CallOption) (*LeaveQueueResponse, error)
	// Получение статуса очереди для события
	GetQueueStatus(ctx context.Context, in *GetQueueStatusRequest, opts ...grpc.CallOption) (*GetQueueStatusResponse, error)
	// Получение позиции пользователя в очереди
	GetUserPosition(ctx context.Context, in *GetUserPositionRequest, opts ...grpc.CallOption) (*GetUserPositionResponse, error)
	// Обработка следующей записи в очереди
	ProcessNext(ctx context.Context, in *ProcessNextRequest, opts ...grpc.CallOption) (*ProcessNextResponse, error)
	// Закрытие набора в очередь для события
	CloseQueue(ctx context.Context, in *CloseQueueRequest, opts ...grpc.CallOption) (*CloseQueueResponse, error)
}

type eventQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventQueueServiceClient(cc grpc.ClientConnInterface) EventQueueServiceClient {
	return &eventQueueServiceClient{cc}
}

func (c *eventQueueServiceClient) JoinQueue(ctx context.Context, in *JoinQueueRequest, opts ...grpc.CallOption) (*JoinQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinQueueResponse)
	err := c.cc.Invoke(ctx, EventQueueService_JoinQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueueServiceClient) LeaveQueue(ctx context.Context, in *LeaveQueueRequest, opts ...grpc.CallOption) (*LeaveQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveQueueResponse)
	err := c.cc.Invoke(ctx, EventQueueService_LeaveQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueueServiceClient) GetQueueStatus(ctx context.Context, in *GetQueueStatusRequest, opts ...grpc.CallOption) (*GetQueueStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueStatusResponse)
	err := c.cc.Invoke(ctx, EventQueueService_GetQueueStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueueServiceClient) GetUserPosition(ctx context.Context, in *GetUserPositionRequest, opts ...grpc.CallOption) (*GetUserPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPositionResponse)
	err := c.cc.Invoke(ctx, EventQueueService_GetUserPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueueServiceClient) ProcessNext(ctx context.Context, in *ProcessNextRequest, opts ...grpc.CallOption) (*ProcessNextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessNextResponse)
	err := c.cc.Invoke(ctx, EventQueueService_ProcessNext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueueServiceClient) CloseQueue(ctx context.Context, in *CloseQueueRequest, opts ...grpc.CallOption) (*CloseQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseQueueResponse)
	err := c.cc.Invoke(ctx, EventQueueService_CloseQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventQueueServiceServer is the server API for EventQueueService service.
// All implementations must embed UnimplementedEventQueueServiceServer
// for forward compatibility.
//
// Сервис для работы с очередью событий
type EventQueueServiceServer interface {
	// Добавление пользователя в очередь события
	JoinQueue(context.Context, *JoinQueueRequest) (*JoinQueueResponse, error)
	// Удаление пользователя из очереди события
	LeaveQueue(context.Context, *LeaveQueueRequest) (*LeaveQueueResponse, error)
	// Получение статуса очереди для события
	GetQueueStatus(context.Context, *GetQueueStatusRequest) (*GetQueueStatusResponse, error)
	// Получение позиции пользователя в очереди
	GetUserPosition(context.Context, *GetUserPositionRequest) (*GetUserPositionResponse, error)
	// Обработка следующей записи в очереди
	ProcessNext(context.Context, *ProcessNextRequest) (*ProcessNextResponse, error)
	// Закрытие набора в очередь для события
	CloseQueue(context.Context, *CloseQueueRequest) (*CloseQueueResponse, error)
	mustEmbedUnimplementedEventQueueServiceServer()
}

// UnimplementedEventQueueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventQueueServiceServer struct{}

func (UnimplementedEventQueueServiceServer) JoinQueue(context.Context, *JoinQueueRequest) (*JoinQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinQueue not implemented")
}
func (UnimplementedEventQueueServiceServer) LeaveQueue(context.Context, *LeaveQueueRequest) (*LeaveQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveQueue not implemented")
}
func (UnimplementedEventQueueServiceServer) GetQueueStatus(context.Context, *GetQueueStatusRequest) (*GetQueueStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStatus not implemented")
}
func (UnimplementedEventQueueServiceServer) GetUserPosition(context.Context, *GetUserPositionRequest) (*GetUserPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPosition not implemented")
}
func (UnimplementedEventQueueServiceServer) ProcessNext(context.Context, *ProcessNextRequest) (*ProcessNextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessNext not implemented")
}
func (UnimplementedEventQueueServiceServer) CloseQueue(context.Context, *CloseQueueRequest) (*CloseQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseQueue not implemented")
}
func (UnimplementedEventQueueServiceServer) mustEmbedUnimplementedEventQueueServiceServer() {}
func (UnimplementedEventQueueServiceServer) testEmbeddedByValue()                           {}

// UnsafeEventQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventQueueServiceServer will
// result in compilation errors.
type UnsafeEventQueueServiceServer interface {
	mustEmbedUnimplementedEventQueueServiceServer()
}

func RegisterEventQueueServiceServer(s grpc.ServiceRegistrar, srv EventQueueServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventQueueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventQueueService_ServiceDesc, srv)
}

func _EventQueueService_JoinQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueueServiceServer).JoinQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQueueService_JoinQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueueServiceServer).JoinQueue(ctx, req.(*JoinQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQueueService_LeaveQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueueServiceServer).LeaveQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQueueService_LeaveQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueueServiceServer).LeaveQueue(ctx, req.(*LeaveQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQueueService_GetQueueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueueServiceServer).GetQueueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQueueService_GetQueueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueueServiceServer).GetQueueStatus(ctx, req.(*GetQueueStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQueueService_GetUserPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueueServiceServer).GetUserPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQueueService_GetUserPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueueServiceServer).GetUserPosition(ctx, req.(*GetUserPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQueueService_ProcessNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessNextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueueServiceServer).ProcessNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQueueService_ProcessNext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueueServiceServer).ProcessNext(ctx, req.(*ProcessNextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQueueService_CloseQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueueServiceServer).CloseQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventQueueService_CloseQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueueServiceServer).CloseQueue(ctx, req.(*CloseQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventQueueService_ServiceDesc is the grpc.ServiceDesc for EventQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.EventQueueService",
	HandlerType: (*EventQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinQueue",
			Handler:    _EventQueueService_JoinQueue_Handler,
		},
		{
			MethodName: "LeaveQueue",
			Handler:    _EventQueueService_LeaveQueue_Handler,
		},
		{
			MethodName: "GetQueueStatus",
			Handler:    _EventQueueService_GetQueueStatus_Handler,
		},
		{
			MethodName: "GetUserPosition",
			Handler:    _EventQueueService_GetUserPosition_Handler,
		},
		{
			MethodName: "ProcessNext",
			Handler:    _EventQueueService_ProcessNext_Handler,
		},
		{
			MethodName: "CloseQueue",
			Handler:    _EventQueueService_CloseQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/event.proto",
}
